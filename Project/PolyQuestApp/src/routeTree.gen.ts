/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as SignInImport } from './routes/sign-in'
import { Route as SettingsImport } from './routes/settings'
import { Route as ForgetPasswordImport } from './routes/forget-password'
import { Route as ForTestingImport } from './routes/for-testing'
import { Route as DisplayResultsImport } from './routes/display-results'
import { Route as ContactImport } from './routes/contact'
import { Route as BookmarkImport } from './routes/bookmark'
import { Route as ActivityImport } from './routes/activity'
import { Route as AcademicResultImport } from './routes/academic-result'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TestRoute = TestImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SignUpRoute = SignUpImport.update({
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ForgetPasswordRoute = ForgetPasswordImport.update({
  path: '/forget-password',
  getParentRoute: () => rootRoute,
} as any)

const ForTestingRoute = ForTestingImport.update({
  path: '/for-testing',
  getParentRoute: () => rootRoute,
} as any)

const DisplayResultsRoute = DisplayResultsImport.update({
  path: '/display-results',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const BookmarkRoute = BookmarkImport.update({
  path: '/bookmark',
  getParentRoute: () => rootRoute,
} as any)

const ActivityRoute = ActivityImport.update({
  path: '/activity',
  getParentRoute: () => rootRoute,
} as any)

const AcademicResultRoute = AcademicResultImport.update({
  path: '/academic-result',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/academic-result': {
      id: '/academic-result'
      path: '/academic-result'
      fullPath: '/academic-result'
      preLoaderRoute: typeof AcademicResultImport
      parentRoute: typeof rootRoute
    }
    '/activity': {
      id: '/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ActivityImport
      parentRoute: typeof rootRoute
    }
    '/bookmark': {
      id: '/bookmark'
      path: '/bookmark'
      fullPath: '/bookmark'
      preLoaderRoute: typeof BookmarkImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/display-results': {
      id: '/display-results'
      path: '/display-results'
      fullPath: '/display-results'
      preLoaderRoute: typeof DisplayResultsImport
      parentRoute: typeof rootRoute
    }
    '/for-testing': {
      id: '/for-testing'
      path: '/for-testing'
      fullPath: '/for-testing'
      preLoaderRoute: typeof ForTestingImport
      parentRoute: typeof rootRoute
    }
    '/forget-password': {
      id: '/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof ForgetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/academic-result': typeof AcademicResultRoute
  '/activity': typeof ActivityRoute
  '/bookmark': typeof BookmarkRoute
  '/contact': typeof ContactRoute
  '/display-results': typeof DisplayResultsRoute
  '/for-testing': typeof ForTestingRoute
  '/forget-password': typeof ForgetPasswordRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/test': typeof TestRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/academic-result': typeof AcademicResultRoute
  '/activity': typeof ActivityRoute
  '/bookmark': typeof BookmarkRoute
  '/contact': typeof ContactRoute
  '/display-results': typeof DisplayResultsRoute
  '/for-testing': typeof ForTestingRoute
  '/forget-password': typeof ForgetPasswordRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/test': typeof TestRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/academic-result': typeof AcademicResultRoute
  '/activity': typeof ActivityRoute
  '/bookmark': typeof BookmarkRoute
  '/contact': typeof ContactRoute
  '/display-results': typeof DisplayResultsRoute
  '/for-testing': typeof ForTestingRoute
  '/forget-password': typeof ForgetPasswordRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/test': typeof TestRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/academic-result'
    | '/activity'
    | '/bookmark'
    | '/contact'
    | '/display-results'
    | '/for-testing'
    | '/forget-password'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/academic-result'
    | '/activity'
    | '/bookmark'
    | '/contact'
    | '/display-results'
    | '/for-testing'
    | '/forget-password'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/academic-result'
    | '/activity'
    | '/bookmark'
    | '/contact'
    | '/display-results'
    | '/for-testing'
    | '/forget-password'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AcademicResultRoute: typeof AcademicResultRoute
  ActivityRoute: typeof ActivityRoute
  BookmarkRoute: typeof BookmarkRoute
  ContactRoute: typeof ContactRoute
  DisplayResultsRoute: typeof DisplayResultsRoute
  ForTestingRoute: typeof ForTestingRoute
  ForgetPasswordRoute: typeof ForgetPasswordRoute
  SettingsRoute: typeof SettingsRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AcademicResultRoute: AcademicResultRoute,
  ActivityRoute: ActivityRoute,
  BookmarkRoute: BookmarkRoute,
  ContactRoute: ContactRoute,
  DisplayResultsRoute: DisplayResultsRoute,
  ForTestingRoute: ForTestingRoute,
  ForgetPasswordRoute: ForgetPasswordRoute,
  SettingsRoute: SettingsRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/academic-result",
        "/activity",
        "/bookmark",
        "/contact",
        "/display-results",
        "/for-testing",
        "/forget-password",
        "/settings",
        "/sign-in",
        "/sign-up",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/academic-result": {
      "filePath": "academic-result.tsx"
    },
    "/activity": {
      "filePath": "activity.tsx"
    },
    "/bookmark": {
      "filePath": "bookmark.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/display-results": {
      "filePath": "display-results.tsx"
    },
    "/for-testing": {
      "filePath": "for-testing.tsx"
    },
    "/forget-password": {
      "filePath": "forget-password.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
